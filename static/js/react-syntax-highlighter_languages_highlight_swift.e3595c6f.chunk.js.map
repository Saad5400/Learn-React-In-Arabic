{"version":3,"file":"static/js/react-syntax-highlighter_languages_highlight_swift.e3595c6f.chunk.js","mappings":"kIASA,SAASA,EAAOC,GACd,OAAKA,EACa,kBAAPA,EAAwBA,EAE5BA,EAAGD,OAHM,IAIlB,CAMA,SAASE,EAAUD,GACjB,OAAOE,EAAO,MAAOF,EAAI,IAC3B,CAMA,SAASE,IAAgB,QAAAC,EAAAC,UAAAC,OAANC,EAAI,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAJF,EAAIE,GAAAJ,UAAAI,GAErB,OADeF,EAAKG,KAAI,SAACC,GAAC,OAAKX,EAAOW,EAAE,IAAEC,KAAK,GAEjD,CASA,SAASC,IAAgB,QAAAC,EAAAT,UAAAC,OAANC,EAAI,IAAAC,MAAAM,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJR,EAAIQ,GAAAV,UAAAU,GAErB,MADe,IAAMR,EAAKG,KAAI,SAACC,GAAC,OAAKX,EAAOW,EAAE,IAAEC,KAAK,KAAO,GAE9D,CAEA,IAAMI,EAAiB,SAAAC,GAAO,OAAId,EAChC,KACAc,EACA,MAAMC,KAAKD,GAAW,KAAO,KAC9B,EAGKE,EAAc,CAClB,WACA,QACAT,IAAIM,GAGAI,EAAsB,CAC1B,OACA,QACAV,IAAIM,GAGAK,EAAe,CACnB,MACA,QAIIC,EAAW,CAIf,iBACA,QACA,QACA,OACA,MACA,KACA,QACA,OACA,QACA,QACA,WACA,cACA,UACA,QACA,SACA,SACA,KACA,UACA,OACA,OACA,YACA,cACA,qBACA,cACA,QACA,MACA,OACA,MACA,QACA,KACA,SACA,WACA,QACA,SACA,QACA,QACA,kBACA,WACA,KACA,KACA,OACA,MACA,WACA,cACA,cACA,OACA,WACA,WACA,WACA,UACA,kBACA,SACA,iBACA,UACA,WACA,gBACA,SACA,SACA,WACA,WACA,SACA,MACA,OACA,SACA,SACA,YACA,QACA,SACA,SACA,QACA,QACA,OACA,MACA,YACA,kBACA,oBACA,UACA,MACA,OACA,QACA,QACA,WAOIC,EAAW,CACf,QACA,MACA,QAIIC,EAA0B,CAC9B,aACA,gBACA,aACA,OACA,YACA,OACA,SAKIC,EAAqB,CACzB,gBACA,UACA,aACA,QACA,UACA,SACA,SACA,QACA,UACA,eACA,YACA,YACA,MACA,gBACA,WACA,QACA,YACA,kBACA,2BACA,YAIIC,EAAW,CACf,MACA,MACA,MACA,SACA,mBACA,aACA,OACA,aACA,YACA,4BACA,MACA,MACA,cACA,eACA,eACA,eACA,sBACA,QACA,WACA,gBACA,WACA,SACA,OACA,oCACA,YACA,OACA,gBACA,iBACA,uBACA,2BACA,oBACA,aACA,0BACA,OAIIC,EAAed,EACnB,oBACA,kBACA,iBACA,iBACA,iBACA,mCACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,YAIIe,EAAoBf,EACxBc,EACA,kBACA,kBACA,kBACA,kBACA,mBAMIE,EAAW1B,EAAOwB,EAAcC,EAAmB,KAGnDE,EAAiBjB,EACrB,YACA,uDACA,yDACA,yDACA,kBACA,+DACA,yDACA,+BACA,yDACA,yDACA,gCASIkB,EAAsBlB,EAC1BiB,EACA,KACA,0DAIIE,EAAa7B,EAAO2B,EAAgBC,EAAqB,KAGzDE,EAAiB9B,EAAO,QAAS4B,EAAqB,KAItDG,EAAoB,CACxB,cACA/B,EAAO,eAAgBU,EAAO,QAAS,QAAS,KAAM,MACtD,oBACA,kBACA,sBACA,WACA,SACA,gBACA,WACA,eACA,gBACA,WACA,gBACA,YACA,OACA,UACA,oBACA,YACA,YACAV,EAAO,SAAU6B,EAAY,MAC7B,OACA,cACA,kBACA,iCACA,WACA,oBACA,UACA,oBAIIG,EAAuB,CAC3B,MACA,0BACA,QACA,4BACA,cACA,kCACA,UACA,8BACA,OACA,2BACA,SAmgBFC,EAAOC,QAtfP,SAAeC,GACb,IAAMC,EAAa,CACjBC,MAAO,MACPC,UAAW,GAGPC,EAAgBJ,EAAKK,QACzB,OACA,OACA,CACEC,SAAU,CAAE,UAGVC,EAAW,CACfP,EAAKQ,oBACLJ,GAKIK,EAAc,CAClBC,UAAW,UACXC,MAAO9C,EAAO,KAAMD,EAAUW,EAAMqC,WAAC,EAADC,EAAIhC,GAAWhB,OAAAgD,EAAK/B,OACxDg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","sources":["../node_modules/highlight.js/lib/languages/swift.js","../node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/iterableToArray.js","../node_modules/@babel/runtime/helpers/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/toConsumableArray.js","../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\nconst keywordWrapper = keyword => concat(\n  /\\b/,\n  keyword,\n  /\\w$/.test(keyword) ? /\\b/ : /\\B/\n);\n\n// Keywords that require a leading dot.\nconst dotKeywords = [\n  'Protocol', // contextual\n  'Type' // contextual\n].map(keywordWrapper);\n\n// Keywords that may have a leading dot.\nconst optionalDotKeywords = [\n  'init',\n  'self'\n].map(keywordWrapper);\n\n// should register as keyword, not type\nconst keywordTypes = [\n  'Any',\n  'Self'\n];\n\n// Regular keywords and literals.\nconst keywords = [\n  // strings below will be fed into the regular `keywords` engine while regex\n  // will result in additional modes being created to scan for those keywords to\n  // avoid conflicts with other rules\n  'associatedtype',\n  'async',\n  'await',\n  /as\\?/, // operator\n  /as!/, // operator\n  'as', // operator\n  'break',\n  'case',\n  'catch',\n  'class',\n  'continue',\n  'convenience', // contextual\n  'default',\n  'defer',\n  'deinit',\n  'didSet', // contextual\n  'do',\n  'dynamic', // contextual\n  'else',\n  'enum',\n  'extension',\n  'fallthrough',\n  /fileprivate\\(set\\)/,\n  'fileprivate',\n  'final', // contextual\n  'for',\n  'func',\n  'get', // contextual\n  'guard',\n  'if',\n  'import',\n  'indirect', // contextual\n  'infix', // contextual\n  /init\\?/,\n  /init!/,\n  'inout',\n  /internal\\(set\\)/,\n  'internal',\n  'in',\n  'is', // operator\n  'lazy', // contextual\n  'let',\n  'mutating', // contextual\n  'nonmutating', // contextual\n  /open\\(set\\)/, // contextual\n  'open', // contextual\n  'operator',\n  'optional', // contextual\n  'override', // contextual\n  'postfix', // contextual\n  'precedencegroup',\n  'prefix', // contextual\n  /private\\(set\\)/,\n  'private',\n  'protocol',\n  /public\\(set\\)/,\n  'public',\n  'repeat',\n  'required', // contextual\n  'rethrows',\n  'return',\n  'set', // contextual\n  'some', // contextual\n  'static',\n  'struct',\n  'subscript',\n  'super',\n  'switch',\n  'throws',\n  'throw',\n  /try\\?/, // operator\n  /try!/, // operator\n  'try', // operator\n  'typealias',\n  /unowned\\(safe\\)/, // contextual\n  /unowned\\(unsafe\\)/, // contextual\n  'unowned', // contextual\n  'var',\n  'weak', // contextual\n  'where',\n  'while',\n  'willSet' // contextual\n];\n\n// NOTE: Contextual keywords are reserved only in specific contexts.\n// Ideally, these should be matched using modes to avoid false positives.\n\n// Literals.\nconst literals = [\n  'false',\n  'nil',\n  'true'\n];\n\n// Keywords used in precedence groups.\nconst precedencegroupKeywords = [\n  'assignment',\n  'associativity',\n  'higherThan',\n  'left',\n  'lowerThan',\n  'none',\n  'right'\n];\n\n// Keywords that start with a number sign (#).\n// #available is handled separately.\nconst numberSignKeywords = [\n  '#colorLiteral',\n  '#column',\n  '#dsohandle',\n  '#else',\n  '#elseif',\n  '#endif',\n  '#error',\n  '#file',\n  '#fileID',\n  '#fileLiteral',\n  '#filePath',\n  '#function',\n  '#if',\n  '#imageLiteral',\n  '#keyPath',\n  '#line',\n  '#selector',\n  '#sourceLocation',\n  '#warn_unqualified_access',\n  '#warning'\n];\n\n// Global functions in the Standard Library.\nconst builtIns = [\n  'abs',\n  'all',\n  'any',\n  'assert',\n  'assertionFailure',\n  'debugPrint',\n  'dump',\n  'fatalError',\n  'getVaList',\n  'isKnownUniquelyReferenced',\n  'max',\n  'min',\n  'numericCast',\n  'pointwiseMax',\n  'pointwiseMin',\n  'precondition',\n  'preconditionFailure',\n  'print',\n  'readLine',\n  'repeatElement',\n  'sequence',\n  'stride',\n  'swap',\n  'swift_unboxFromSwiftValueWithType',\n  'transcode',\n  'type',\n  'unsafeBitCast',\n  'unsafeDowncast',\n  'withExtendedLifetime',\n  'withUnsafeMutablePointer',\n  'withUnsafePointer',\n  'withVaList',\n  'withoutActuallyEscaping',\n  'zip'\n];\n\n// Valid first characters for operators.\nconst operatorHead = either(\n  /[/=\\-+!*%<>&|^~?]/,\n  /[\\u00A1-\\u00A7]/,\n  /[\\u00A9\\u00AB]/,\n  /[\\u00AC\\u00AE]/,\n  /[\\u00B0\\u00B1]/,\n  /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/,\n  /[\\u2016-\\u2017]/,\n  /[\\u2020-\\u2027]/,\n  /[\\u2030-\\u203E]/,\n  /[\\u2041-\\u2053]/,\n  /[\\u2055-\\u205E]/,\n  /[\\u2190-\\u23FF]/,\n  /[\\u2500-\\u2775]/,\n  /[\\u2794-\\u2BFF]/,\n  /[\\u2E00-\\u2E7F]/,\n  /[\\u3001-\\u3003]/,\n  /[\\u3008-\\u3020]/,\n  /[\\u3030]/\n);\n\n// Valid characters for operators.\nconst operatorCharacter = either(\n  operatorHead,\n  /[\\u0300-\\u036F]/,\n  /[\\u1DC0-\\u1DFF]/,\n  /[\\u20D0-\\u20FF]/,\n  /[\\uFE00-\\uFE0F]/,\n  /[\\uFE20-\\uFE2F]/\n  // TODO: The following characters are also allowed, but the regex isn't supported yet.\n  // /[\\u{E0100}-\\u{E01EF}]/u\n);\n\n// Valid operator.\nconst operator = concat(operatorHead, operatorCharacter, '*');\n\n// Valid first characters for identifiers.\nconst identifierHead = either(\n  /[a-zA-Z_]/,\n  /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/,\n  /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/,\n  /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/,\n  /[\\u1E00-\\u1FFF]/,\n  /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/,\n  /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/,\n  /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/,\n  /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/,\n  /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/,\n  /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/ // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\n  // The following characters are also allowed, but the regexes aren't supported yet.\n  // /[\\u{10000}-\\u{1FFFD}\\u{20000-\\u{2FFFD}\\u{30000}-\\u{3FFFD}\\u{40000}-\\u{4FFFD}]/u,\n  // /[\\u{50000}-\\u{5FFFD}\\u{60000-\\u{6FFFD}\\u{70000}-\\u{7FFFD}\\u{80000}-\\u{8FFFD}]/u,\n  // /[\\u{90000}-\\u{9FFFD}\\u{A0000-\\u{AFFFD}\\u{B0000}-\\u{BFFFD}\\u{C0000}-\\u{CFFFD}]/u,\n  // /[\\u{D0000}-\\u{DFFFD}\\u{E0000-\\u{EFFFD}]/u\n);\n\n// Valid characters for identifiers.\nconst identifierCharacter = either(\n  identifierHead,\n  /\\d/,\n  /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/\n);\n\n// Valid identifier.\nconst identifier = concat(identifierHead, identifierCharacter, '*');\n\n// Valid type identifier.\nconst typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');\n\n// Built-in attributes, which are highlighted as keywords.\n// @available is handled separately.\nconst keywordAttributes = [\n  'autoclosure',\n  concat(/convention\\(/, either('swift', 'block', 'c'), /\\)/),\n  'discardableResult',\n  'dynamicCallable',\n  'dynamicMemberLookup',\n  'escaping',\n  'frozen',\n  'GKInspectable',\n  'IBAction',\n  'IBDesignable',\n  'IBInspectable',\n  'IBOutlet',\n  'IBSegueAction',\n  'inlinable',\n  'main',\n  'nonobjc',\n  'NSApplicationMain',\n  'NSCopying',\n  'NSManaged',\n  concat(/objc\\(/, identifier, /\\)/),\n  'objc',\n  'objcMembers',\n  'propertyWrapper',\n  'requires_stored_property_inits',\n  'testable',\n  'UIApplicationMain',\n  'unknown',\n  'usableFromInline'\n];\n\n// Contextual keywords used in @available and #available.\nconst availabilityKeywords = [\n  'iOS',\n  'iOSApplicationExtension',\n  'macOS',\n  'macOSApplicationExtension',\n  'macCatalyst',\n  'macCatalystApplicationExtension',\n  'watchOS',\n  'watchOSApplicationExtension',\n  'tvOS',\n  'tvOSApplicationExtension',\n  'swift'\n];\n\n/*\nLanguage: Swift\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\nAuthor: Steven Van Impe <steven.vanimpe@icloud.com>\nContributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>\nWebsite: https://swift.org\nCategory: common, system\n*/\n\n/** @type LanguageFn */\nfunction swift(hljs) {\n  const WHITESPACE = {\n    match: /\\s+/,\n    relevance: 0\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411\n  const BLOCK_COMMENT = hljs.COMMENT(\n    '/\\\\*',\n    '\\\\*/',\n    {\n      contains: [ 'self' ]\n    }\n  );\n  const COMMENTS = [\n    hljs.C_LINE_COMMENT_MODE,\n    BLOCK_COMMENT\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413\n  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html\n  const DOT_KEYWORD = {\n    className: 'keyword',\n    begin: concat(/\\./, lookahead(either(...dotKeywords, ...optionalDotKeywords))),\n    end: either(...dotKeywords, ...optionalDotKeywords),\n    excludeBegin: true\n  };\n  const KEYWORD_GUARD = {\n    // Consume .keyword to prevent highlighting properties and methods as keywords.\n    match: concat(/\\./, either(...keywords)),\n    relevance: 0\n  };\n  const PLAIN_KEYWORDS = keywords\n    .filter(kw => typeof kw === 'string')\n    .concat([ \"_|0\" ]); // seems common, so 0 relevance\n  const REGEX_KEYWORDS = keywords\n    .filter(kw => typeof kw !== 'string') // find regex\n    .concat(keywordTypes)\n    .map(keywordWrapper);\n  const KEYWORD = {\n    variants: [\n      {\n        className: 'keyword',\n        match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)\n      }\n    ]\n  };\n  // find all the regular keywords\n  const KEYWORDS = {\n    $pattern: either(\n      /\\b\\w+/, // regular keywords\n      /#\\w+/ // number keywords\n    ),\n    keyword: PLAIN_KEYWORDS\n      .concat(numberSignKeywords),\n    literal: literals\n  };\n  const KEYWORD_MODES = [\n    DOT_KEYWORD,\n    KEYWORD_GUARD,\n    KEYWORD\n  ];\n\n  // https://github.com/apple/swift/tree/main/stdlib/public/core\n  const BUILT_IN_GUARD = {\n    // Consume .built_in to prevent highlighting properties and methods.\n    match: concat(/\\./, either(...builtIns)),\n    relevance: 0\n  };\n  const BUILT_IN = {\n    className: 'built_in',\n    match: concat(/\\b/, either(...builtIns), /(?=\\()/)\n  };\n  const BUILT_INS = [\n    BUILT_IN_GUARD,\n    BUILT_IN\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418\n  const OPERATOR_GUARD = {\n    // Prevent -> from being highlighting as an operator.\n    match: /->/,\n    relevance: 0\n  };\n  const OPERATOR = {\n    className: 'operator',\n    relevance: 0,\n    variants: [\n      {\n        match: operator\n      },\n      {\n        // dot-operator: only operators that start with a dot are allowed to use dots as\n        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more\n        // characters that may also include dots.\n        match: `\\\\.(\\\\.|${operatorCharacter})+`\n      }\n    ]\n  };\n  const OPERATORS = [\n    OPERATOR_GUARD,\n    OPERATOR\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\n  // TODO: Update for leading `-` after lookbehind is supported everywhere\n  const decimalDigits = '([0-9]_*)+';\n  const hexDigits = '([0-9a-fA-F]_*)+';\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      // decimal floating-point-literal (subsumes decimal-literal)\n      {\n        match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b`\n      },\n      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n      {\n        match: `\\\\b0x(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b`\n      },\n      // octal-literal\n      {\n        match: /\\b0o([0-7]_*)+\\b/\n      },\n      // binary-literal\n      {\n        match: /\\b0b([01]_*)+\\b/\n      }\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal\n  const ESCAPED_CHARACTER = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    variants: [\n      {\n        match: concat(/\\\\/, rawDelimiter, /[0\\\\tnr\"']/)\n      },\n      {\n        match: concat(/\\\\/, rawDelimiter, /u\\{[0-9a-fA-F]{1,8}\\}/)\n      }\n    ]\n  });\n  const ESCAPED_NEWLINE = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    match: concat(/\\\\/, rawDelimiter, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\n  });\n  const INTERPOLATION = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    label: \"interpol\",\n    begin: concat(/\\\\/, rawDelimiter, /\\(/),\n    end: /\\)/\n  });\n  const MULTILINE_STRING = (rawDelimiter = \"\") => ({\n    begin: concat(rawDelimiter, /\"\"\"/),\n    end: concat(/\"\"\"/, rawDelimiter),\n    contains: [\n      ESCAPED_CHARACTER(rawDelimiter),\n      ESCAPED_NEWLINE(rawDelimiter),\n      INTERPOLATION(rawDelimiter)\n    ]\n  });\n  const SINGLE_LINE_STRING = (rawDelimiter = \"\") => ({\n    begin: concat(rawDelimiter, /\"/),\n    end: concat(/\"/, rawDelimiter),\n    contains: [\n      ESCAPED_CHARACTER(rawDelimiter),\n      INTERPOLATION(rawDelimiter)\n    ]\n  });\n  const STRING = {\n    className: 'string',\n    variants: [\n      MULTILINE_STRING(),\n      MULTILINE_STRING(\"#\"),\n      MULTILINE_STRING(\"##\"),\n      MULTILINE_STRING(\"###\"),\n      SINGLE_LINE_STRING(),\n      SINGLE_LINE_STRING(\"#\"),\n      SINGLE_LINE_STRING(\"##\"),\n      SINGLE_LINE_STRING(\"###\")\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412\n  const QUOTED_IDENTIFIER = {\n    match: concat(/`/, identifier, /`/)\n  };\n  const IMPLICIT_PARAMETER = {\n    className: 'variable',\n    match: /\\$\\d+/\n  };\n  const PROPERTY_WRAPPER_PROJECTION = {\n    className: 'variable',\n    match: `\\\\$${identifierCharacter}+`\n  };\n  const IDENTIFIERS = [\n    QUOTED_IDENTIFIER,\n    IMPLICIT_PARAMETER,\n    PROPERTY_WRAPPER_PROJECTION\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html\n  const AVAILABLE_ATTRIBUTE = {\n    match: /(@|#)available/,\n    className: \"keyword\",\n    starts: {\n      contains: [\n        {\n          begin: /\\(/,\n          end: /\\)/,\n          keywords: availabilityKeywords,\n          contains: [\n            ...OPERATORS,\n            NUMBER,\n            STRING\n          ]\n        }\n      ]\n    }\n  };\n  const KEYWORD_ATTRIBUTE = {\n    className: 'keyword',\n    match: concat(/@/, either(...keywordAttributes))\n  };\n  const USER_DEFINED_ATTRIBUTE = {\n    className: 'meta',\n    match: concat(/@/, identifier)\n  };\n  const ATTRIBUTES = [\n    AVAILABLE_ATTRIBUTE,\n    KEYWORD_ATTRIBUTE,\n    USER_DEFINED_ATTRIBUTE\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Types.html\n  const TYPE = {\n    match: lookahead(/\\b[A-Z]/),\n    relevance: 0,\n    contains: [\n      { // Common Apple frameworks, for relevance boost\n        className: 'type',\n        match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')\n      },\n      { // Type identifier\n        className: 'type',\n        match: typeIdentifier,\n        relevance: 0\n      },\n      { // Optional type\n        match: /[?!]+/,\n        relevance: 0\n      },\n      { // Variadic parameter\n        match: /\\.\\.\\./,\n        relevance: 0\n      },\n      { // Protocol composition\n        match: concat(/\\s+&\\s+/, lookahead(typeIdentifier)),\n        relevance: 0\n      }\n    ]\n  };\n  const GENERIC_ARGUMENTS = {\n    begin: /</,\n    end: />/,\n    keywords: KEYWORDS,\n    contains: [\n      ...COMMENTS,\n      ...KEYWORD_MODES,\n      ...ATTRIBUTES,\n      OPERATOR_GUARD,\n      TYPE\n    ]\n  };\n  TYPE.contains.push(GENERIC_ARGUMENTS);\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552\n  // Prevents element names from being highlighted as keywords.\n  const TUPLE_ELEMENT_NAME = {\n    match: concat(identifier, /\\s*:/),\n    keywords: \"_|0\",\n    relevance: 0\n  };\n  // Matches tuples as well as the parameter list of a function type.\n  const TUPLE = {\n    begin: /\\(/,\n    end: /\\)/,\n    relevance: 0,\n    keywords: KEYWORDS,\n    contains: [\n      'self',\n      TUPLE_ELEMENT_NAME,\n      ...COMMENTS,\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS,\n      ...ATTRIBUTES,\n      TYPE\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362\n  // Matches both the keyword func and the function title.\n  // Grouping these lets us differentiate between the operator function <\n  // and the start of the generic parameter clause (also <).\n  const FUNC_PLUS_TITLE = {\n    beginKeywords: 'func',\n    contains: [\n      {\n        className: 'title',\n        match: either(QUOTED_IDENTIFIER.match, identifier, operator),\n        // Required to make sure the opening < of the generic parameter clause\n        // isn't parsed as a second title.\n        endsParent: true,\n        relevance: 0\n      },\n      WHITESPACE\n    ]\n  };\n  const GENERIC_PARAMETERS = {\n    begin: /</,\n    end: />/,\n    contains: [\n      ...COMMENTS,\n      TYPE\n    ]\n  };\n  const FUNCTION_PARAMETER_NAME = {\n    begin: either(\n      lookahead(concat(identifier, /\\s*:/)),\n      lookahead(concat(identifier, /\\s+/, identifier, /\\s*:/))\n    ),\n    end: /:/,\n    relevance: 0,\n    contains: [\n      {\n        className: 'keyword',\n        match: /\\b_\\b/\n      },\n      {\n        className: 'params',\n        match: identifier\n      }\n    ]\n  };\n  const FUNCTION_PARAMETERS = {\n    begin: /\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS,\n    contains: [\n      FUNCTION_PARAMETER_NAME,\n      ...COMMENTS,\n      ...KEYWORD_MODES,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...ATTRIBUTES,\n      TYPE,\n      TUPLE\n    ],\n    endsParent: true,\n    illegal: /[\"']/\n  };\n  const FUNCTION = {\n    className: 'function',\n    match: lookahead(/\\bfunc\\b/),\n    contains: [\n      FUNC_PLUS_TITLE,\n      GENERIC_PARAMETERS,\n      FUNCTION_PARAMETERS,\n      WHITESPACE\n    ],\n    illegal: [\n      /\\[/,\n      /%/\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379\n  const INIT_SUBSCRIPT = {\n    className: 'function',\n    match: /\\b(subscript|init[?!]?)\\s*(?=[<(])/,\n    keywords: {\n      keyword: \"subscript init init? init!\",\n      $pattern: /\\w+[?!]?/\n    },\n    contains: [\n      GENERIC_PARAMETERS,\n      FUNCTION_PARAMETERS,\n      WHITESPACE\n    ],\n    illegal: /\\[|%/\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380\n  const OPERATOR_DECLARATION = {\n    beginKeywords: 'operator',\n    end: hljs.MATCH_NOTHING_RE,\n    contains: [\n      {\n        className: 'title',\n        match: operator,\n        endsParent: true,\n        relevance: 0\n      }\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550\n  const PRECEDENCEGROUP = {\n    beginKeywords: 'precedencegroup',\n    end: hljs.MATCH_NOTHING_RE,\n    contains: [\n      {\n        className: 'title',\n        match: typeIdentifier,\n        relevance: 0\n      },\n      {\n        begin: /{/,\n        end: /}/,\n        relevance: 0,\n        endsParent: true,\n        keywords: [\n          ...precedencegroupKeywords,\n          ...literals\n        ],\n        contains: [ TYPE ]\n      }\n    ]\n  };\n\n  // Add supported submodes to string interpolation.\n  for (const variant of STRING.variants) {\n    const interpolation = variant.contains.find(mode => mode.label === \"interpol\");\n    // TODO: Interpolation can contain any expression, so there's room for improvement here.\n    interpolation.keywords = KEYWORDS;\n    const submodes = [\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS\n    ];\n    interpolation.contains = [\n      ...submodes,\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        contains: [\n          'self',\n          ...submodes\n        ]\n      }\n    ];\n  }\n\n  return {\n    name: 'Swift',\n    keywords: KEYWORDS,\n    contains: [\n      ...COMMENTS,\n      FUNCTION,\n      INIT_SUBSCRIPT,\n      {\n        className: 'class',\n        beginKeywords: 'struct protocol class extension enum',\n        end: '\\\\{',\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {\n            begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/\n          }),\n          ...KEYWORD_MODES\n        ]\n      },\n      OPERATOR_DECLARATION,\n      PRECEDENCEGROUP,\n      {\n        beginKeywords: 'import',\n        end: /$/,\n        contains: [ ...COMMENTS ],\n        relevance: 0\n      },\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS,\n      ...ATTRIBUTES,\n      TYPE,\n      TUPLE\n    ]\n  };\n}\n\nmodule.exports = swift;\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nmodule.exports = _createForOfIteratorHelper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["source","re","lookahead","concat","_len","arguments","length","args","Array","_key","map","x","join","either","_len2","_key2","keywordWrapper","keyword","test","dotKeywords","optionalDotKeywords","keywordTypes","keywords","literals","precedencegroupKeywords","numberSignKeywords","builtIns","operatorHead","operatorCharacter","operator","identifierHead","identifierCharacter","identifier","typeIdentifier","keywordAttributes","availabilityKeywords","module","exports","hljs","WHITESPACE","match","relevance","BLOCK_COMMENT","COMMENT","contains","COMMENTS","C_LINE_COMMENT_MODE","DOT_KEYWORD","className","begin","apply","_toConsumableArray","end","excludeBegin","KEYWORD_GUARD","PLAIN_KEYWORDS","filter","kw","REGEX_KEYWORDS","KEYWORD","variants","KEYWORDS","$pattern","literal","KEYWORD_MODES","BUILT_INS","OPERATOR_GUARD","OPERATORS","decimalDigits","hexDigits","NUMBER","ESCAPED_CHARACTER","rawDelimiter","undefined","ESCAPED_NEWLINE","INTERPOLATION","label","MULTILINE_STRING","SINGLE_LINE_STRING","STRING","QUOTED_IDENTIFIER","IDENTIFIERS","ATTRIBUTES","starts","TYPE","GENERIC_ARGUMENTS","push","_step","TUPLE","FUNC_PLUS_TITLE","beginKeywords","endsParent","GENERIC_PARAMETERS","FUNCTION_PARAMETERS","illegal","FUNCTION","INIT_SUBSCRIPT","OPERATOR_DECLARATION","MATCH_NOTHING_RE","PRECEDENCEGROUP","_iterator","_createForOfIteratorHelper","s","n","done","interpolation","value","find","mode","submodes","err","e","f","name","excludeEnd","inherit","TITLE_MODE","arr","len","i","arr2","__esModule","arrayLikeToArray","isArray","unsupportedIterableToArray","o","allowArrayLike","it","Symbol","iterator","F","_e","TypeError","normalCompletion","didErr","call","step","next","_e2","iter","from","arrayWithoutHoles","iterableToArray","nonIterableSpread","minLen","Object","prototype","toString","slice","constructor"],"sourceRoot":""}